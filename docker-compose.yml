version: "3.8"

x-playlist-selection-common:
  &playlist-selection-common
  build:
      context: .
      dockerfile: docker/Dockerfile
      target: production
  environment:
    &playlist-selection-common-env
    - PLAYLIST_SELECTION_REDIS_HOST=redis
    - PLAYLIST_SELECTION_REDIS_PORT=6379
    - PLAYLIST_SELECTION_CLIENT_ID=${PLAYLIST_SELECTION_CLIENT_ID}
    - PLAYLIST_SELECTION_CLIENT_SECRET=${PLAYLIST_SELECTION_CLIENT_SECRET}
    - PLAYLIST_SELECTION_CALLBACK_URL=${PLAYLIST_SELECTION_CALLBACK_URL}
    - PLAYLIST_SELECTION_S3_BUCKET_NAME=${PLAYLIST_SELECTION_S3_BUCKET_NAME}
    - PLAYLIST_SELECTION_S3_PROFILE_NAME=${PLAYLIST_SELECTION_S3_PROFILE_NAME}
    - PLAYLIST_SELECTION_MODEL_CLASS=${PLAYLIST_SELECTION_MODEL_CLASS}
    - PLAYLIST_SELECTION_MODEL_NAME=${PLAYLIST_SELECTION_MODEL_NAME}
    - SERVICE_URI=http://app:5000
    - BOT_TOKEN=${BOT_TOKEN}
  env_file:
    &playlist-selection-common-env-file
    - .env
  depends_on:
    &playlist-selection-common-depends-on
    redis:
      condition: service_healthy


x-playlist-selection-tests:
  &playlist-selection-tests
  build:
      context: .
      dockerfile: docker/Dockerfile
      target: dev
  environment:
    &playlist-selection-tests-env
    PLAYLIST_SELECTION_PGDATABASE: playlist_selection
    PLAYLIST_SELECTION_PGUSER: user
    PLAYLIST_SELECTION_PGPASSWORD: pass
    PLAYLIST_SELECTION_PGHOST: test-db
    PLAYLIST_SELECTION_PGSSLMODE: disable
    PLAYLIST_SELECTION_PGPORT: 5432
    PLAYLIST_SELECTION_REDIS_HOST: test-redis
    PLAYLIST_SELECTION_REDIS_PORT: 6379
    # TODO TESTS: setup minio
    # PLAYLIST_SELECTION_CLIENT_ID: ""
    # PLAYLIST_SELECTION_CLIENT_SECRET: ""
    # PLAYLIST_SELECTION_CALLBACK_URL: "https://localhost:5000"
    PLAYLIST_SELECTION_CLIENT_ID: ${PLAYLIST_SELECTION_CLIENT_ID}
    PLAYLIST_SELECTION_CLIENT_SECRET: ${PLAYLIST_SELECTION_CLIENT_SECRET}
    PLAYLIST_SELECTION_CALLBACK_URL: "https://localhost:5000"
    PLAYLIST_SELECTION_S3_ENDPOINT_URL: "http://test-s3:9000"
    PLAYLIST_SELECTION_S3_BUCKET_NAME: "playlist-selection"
    PLAYLIST_SELECTION_S3_PROFILE_NAME: ""
    PLAYLIST_SELECTION_MODEL_CLASS: "KnnModel"
    PLAYLIST_SELECTION_MODEL_NAME: ""
    AWS_ACCESS_KEY_ID: "user"
    AWS_SECRET_ACCESS_KEY: "pass12345678"
    AWS_ENDPOINT_URL: "http://test-s3:9000"
  depends_on:
    &playlist-selection-tests-depends-on
    test-redis:
      condition: service_healthy

services:

  init_db:
    <<: *playlist-selection-common
    command:
      - bash
      - "-c"
      - >
        python -m alembic upgrade head  # &&
        python -m app.db.init_db

  app:
    <<: *playlist-selection-common
    ports:
      - "5000:5000"
    depends_on:
      <<: *playlist-selection-common-depends-on
      init_db:
        condition: service_completed_successfully
      worker:
        condition: service_started
    restart: always
    command: uvicorn app.main:app --host 0.0.0.0 --port 5000 --log-config /usr/local/conf/logging_config.yml
    healthcheck:
      test: python -c "import requests; requests.get('http://app:5000').raise_for_status()"
      interval: 10s
      retries: 5
      start_period: 10s
      timeout: 10s

  worker:
    <<: *playlist-selection-common
    restart: always
    command: celery -A app.worker worker --loglevel=INFO

  flower:
    <<: *playlist-selection-common
    restart: always
    depends_on:
      <<: *playlist-selection-common-depends-on
      worker:
        condition: service_started
    command: celery -A app.worker flower --host=0.0.0.0 --port=5555 --loglevel=INFO

  bot:
    <<: *playlist-selection-common
    build: ./bot
    restart: always
    depends_on:
      <<: *playlist-selection-common-depends-on
      app:
        condition: service_healthy

  redis:
    image: "redis:latest"
    restart: always
    command: redis-server --save 30 1 --loglevel notice
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 5
      start_period: 10s

  pytest:
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: dev
    volumes:
      - ./tests:/playlist-selection-app/tests
      - ./pyproject.toml:/playlist-selection-app/pyproject.toml
    depends_on:
      - test-s3
      - test-db
      - test-redis
      - test-celery
    environment:
      <<: *playlist-selection-tests-env
      PYTEST_ADDOPTS: --without-integration --benchmark-autosave --durations 10 --cov app --cov-report term --cov-report xml --cov-fail-under=80  --junitxml xunit-reports/xunit-result-unit.xml
    entrypoint:
      ["pytest"]

  test-s3:
    image: minio/minio
    environment:
      - MINIO_ROOT_USER=user
      - MINIO_ROOT_PASSWORD=pass12345678
    entrypoint: sh
    # TODO TESTS: add custom model & data sample to bucket
    command: -c 'mkdir -p /data/playlist-selection && minio server --console-address :9001 /data'

  test-redis:
    image: "redis:latest"
    command: redis-server --save "" --appendonly no
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 5
      start_period: 10s

  test-db:
    image: postgres
    tmpfs: /var/lib/postgresql/data
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pass
      PGDATA: /var/lib/postgresql/data

  test-celery:
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: dev
    environment:
      <<: *playlist-selection-tests-env
    command: celery -A app.worker worker --loglevel=INFO
