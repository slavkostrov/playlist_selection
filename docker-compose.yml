version: "3.8"

x-playlist-selection-common:
  &playlist-selection-common
  build:
      context: .
      dockerfile: docker/Dockerfile
      target: production
  environment:
    &playlist-selection-common-env
    - PLAYLIST_SELECTION_REDIS_HOST=redis
    - PLAYLIST_SELECTION_REDIS_PORT=6379
    - PLAYLIST_SELECTION_CLIENT_ID=${PLAYLIST_SELECTION_CLIENT_ID}
    - PLAYLIST_SELECTION_CLIENT_SECRET=${PLAYLIST_SELECTION_CLIENT_SECRET}
    - PLAYLIST_SELECTION_CALLBACK_URL=${PLAYLIST_SELECTION_CALLBACK_URL}
    - PLAYLIST_SELECTION_S3_BUCKET_NAME=${PLAYLIST_SELECTION_S3_BUCKET_NAME}
    - PLAYLIST_SELECTION_S3_PROFILE_NAME=${PLAYLIST_SELECTION_S3_PROFILE_NAME}
    - PLAYLIST_SELECTION_MODEL_CLASS=${PLAYLIST_SELECTION_MODEL_CLASS}
    - PLAYLIST_SELECTION_MODEL_NAME=${PLAYLIST_SELECTION_MODEL_NAME}
    - SERVICE_URI=http://app:5000
    - BOT_TOKEN=${BOT_TOKEN}
  env_file:
    &playlist-selection-common-env-file
    - .env
  depends_on:
    &playlist-selection-common-depends-on
    redis:
      condition: service_healthy

services:

  init_db:
    <<: *playlist-selection-common
    command:
      - bash
      - "-c"
      - >
        python -m alembic upgrade head  # &&
        python -m app.db.init_db

  app:
    <<: *playlist-selection-common
    ports:
      - "5000:5000"
    depends_on:
      <<: *playlist-selection-common-depends-on
      init_db:
        condition: service_completed_successfully
      worker:
        condition: service_started
    restart: always
    command: uvicorn app.main:app --host 0.0.0.0 --port 5000 --log-config /usr/local/conf/logging_config.yml
    healthcheck:
      test: python -c "import requests; requests.get('http://app:5000').raise_for_status()"
      interval: 5s
      retries: 5
      start_period: 15s
      timeout: 10s

  worker:
    <<: *playlist-selection-common
    restart: always
    command: celery -A app.worker worker --loglevel=INFO

  flower:
    <<: *playlist-selection-common
    restart: always
    depends_on:
      <<: *playlist-selection-common-depends-on
      worker:
        condition: service_started
    command: celery -A app.worker flower --host=0.0.0.0 --port=5555 --loglevel=INFO

  bot:
    <<: *playlist-selection-common
    build: ./bot
    restart: always
    depends_on:
      <<: *playlist-selection-common-depends-on
      app:
        condition: service_healthy

  redis:
    image: "redis:latest"
    restart: always
    command: redis-server --save 30 1 --loglevel notice
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 50
      start_period: 10s

  pytest:
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: dev
    volumes:
      - ./:/playlist-selection-app
    depends_on:
      - test-db
    environment:
      PGDATABASE: playlist_selection
      PGUSER: user
      PGPASSWORD: pass
      PGHOST: test-db
      # --without-integration
      # --benchmark-autosave
      PYTEST_ADDOPTS: --durations 10 --cov app --cov-report term --cov-report xml --cov-fail-under=95  --junitxml xunit-reports/xunit-result-unit.xml
    entrypoint:
      ["pytest"]

  test-db:
    image: postgres
    tmpfs: /var/lib/postgresql/data
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pass
      PGDATA: /var/lib/postgresql/data
